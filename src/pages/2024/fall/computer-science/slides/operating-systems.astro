---
import Slides from '@layouts/Slides.astro'
---

<Slides title="Operating Systems">
  <section>
    <h2>Week 3</h2>
    <!-- 09/19/2024 -->
    <blockquote style="font-size: .8em">
      OS, Storage, Data Types, Operators, Loops
    </blockquote>
  </section>

  <section>
    <h2 class="r-fit-text">WARNING: Today Will Cover a Lot</h2>
    <img src="https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExbDdmMm15dnFsYWxyNDQ0aTR1dnV0YW94NGt6NXVzNjdudjhmeDJjcSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/xULW8x4nFdoEntmTAI/giphy.webp" alt="" height="400">
    <aside class="notes">
      <p>I fully expect you to revisit this slide deck for review</p>
    </aside>
  </section>

  <!-- INTRO TO OPERATING SYSTEMS -->
  <section>
    <section>
      <h2 class="r-fit-text">What is an Operating System (OS)?</h2>
      <aside class="notes">
        <p>Special piece of software that makes it easy for other software to communicate with hardware</p>
      </aside>
    </section>

    <section>
      <h3>Device Drivers</h3>
      <ul>
        <li>There is no universal language for hardware</li>
        <li>Device drivers allows reusable I/O code</li>
      </ul>
    </section>

    <section>
      <h3>Multitasking</h3>
      <ul>
        <li>Process scheduling</li>
        <li>Single core vs. multi-core</li>
      </ul>
    </section>

    <section>
      <h3>User Management</h3>
      <ul>
        <li>Developed from "Time-Sharing"</li>
        <li>Users and groups</li>
        <li>Privileges</li>
      </ul>
    </section>

    <section>
      <h3>Memory Allocation</h3>
      <blockquote>AKA "Virtual Memory"</blockquote>
      <ul>
        <li>Simplifies memory management</li>
        <li>Prevent attacks like buffer overflow</li>
        <li>Allows some programs to have more memory</li>
      </ul>
    </section>

    <section>
      <h3>File System</h3>
      <ul>
        <li>Abstracts data to "files"</li>
        <li>Directory (folder) hierarchy</li>
        <li>File permissions</li>
      </ul>
    </section>
  </section>

  <!-- COMMON OPERATING SYSTEMS -->
  <section>
    <section>
      <h2 class="r-fit-text">Common Operating Systems</h2>
      <ul>
        <li class="fragment">Windows</li>
        <li class="fragment">MacOS</li>
        <li class="fragment">Linux</li>
        <li class="fragment">Android</li>
        <li class="fragment">iOS</li>
      </ul>
    </section>
    <aside class="notes">
      <p>
        Operating systems by market share:
        <ul>
          <li>Android 45%</li>
          <li>Windows 25%</li>
          <li>iOS 18%</li>
          <li>macOS 5%</li>
          <li>Linux 1%</li>
        </ul>
        NOTE: stats according to <a href="https://gs.statcounter.com/os-market-share/">gs.statcounter.com</a>
      </p>
    </aside>

    <section>
      <h3>Windows</h3>
      <img src="https://cdn-dynmedia-1.microsoft.com/is/image/microsoftcorp/MSFT-PC-open-with-Start-menu-on-the-screen?scl=2" alt="" height="400">
      <aside class="notes">
        <p>
          <ul>
            <li>Made by Microsoft</li>
            <li>First version 1985</li>
            <li>GUI on top of MS-DOS</li>
            <li>
              Versions:
              <ul>
                <li>Windows (for consumers)</li>
                <li>Windows Server</li>
                <li>Windows PE</li>
                <li>Windows IoT</li>
              </ul>
            </li>
          </ul>
        </p>
      </aside>
    </section>

    <section>
      <h3>macOS</h3>
      <img src="https://www.apple.com/newsroom/images/2024/09/macos-sequoia-is-available-today/article/Apple-macOS-Sequoia-hero_big.jpg.large_2x.jpg" alt="" height="400">
      <aside class="notes">
        <p>
          <ul>
            <li>Made by Apple</li>
            <li>First version (Mac OS) 1984</li>
            <li>"Deliberately sought to minimize the user's awareness of the operating system" (<a href="https://en.wikipedia.org/wiki/Classic_Mac_OS">Wikipedia</a>)</li>
            <li>Uses different file system than Windows</li>
          </ul>
        </p>
      </aside>
    </section>

    <section>
      <h3>Linux</h3>
      <img src="https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fwww.ubuntushop.be%2Fimages%2F751ubufront.png&f=1&nofb=1&ipt=964c9bf0d1bf902df6e3f1d7d94d4f5e75838c4f7a99beb96dd9b5e316c90e5c&ipo=images" alt="" height="400">
      <aside class="notes">
        <p>
          <ul>
            <li>Family of open-source OSs</li>
            <li>
              Some popular distributions (distros):
              <ul>
                <li>Ubuntu</li>
                <li>Mint</li>
                <li>Debian</li>
                <li>Fedora</li>
                <li>Arch</li>
              </ul>
            </li>
            <li>Linux kernal used by Android and Chrome OS</li>
          </ul>
        </p>
      </aside>
    </section>
  </section>

  <!-- STORAGE -->
  <section>
    <section>
      <h2 class="r-fit-text">Persistent vs. Volatile Storage</h2>
    </section>

    <section>
      <h3>Persistent Storage</h3>
      <ul>
        <li>AKA "permanent" storage</li>
        <li class="fragment">Retained when computer is off</li>
        <li class="fragment">Cheap üí≤</li>
        <li class="fragment">Slow üê¢</li>
      </ul>
    </section>

    <section>
      <h4>Common Types</h4>
      <div class="r-stack">
        <img src="https://heirloom.cloud/cdn/shop/articles/64ee4ce0479e7649341854f3_rsz_18in_-_525_in_-_35_in_floppy_disks_adobestock_169862513_c644b2da-09d8-4259-8157-d7ae1e5b4623.jpg?v=1709917997&width=1200" alt="" height="400" class="fragment current-visible">
        <img src="https://www.findlight.net/blog/wp-content/uploads/2018/05/cant-eject-cd-laptop.jpg" alt="" height="400" class="fragment current-visible">
        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/f8/Laptop-hard-drive-exposed.jpg/800px-Laptop-hard-drive-exposed.jpg" alt="" height="400" class="fragment current-visible">
        <img src="https://www.backblaze.com/blog/wp-content/uploads/2016/03/blog-ssd-inside.jpg" alt="" height="400" class="fragment current-visible">
      </div>
      <aside class="notes">
        <p>
          <ul>
            <li>Floppy Discs (magnetic material) - ~500 KB/s</li>
            <li>Optical Discs (use a physical medium with pits and lands) - ~72 MB/s (Blu-ray)</li>
            <li>Hard Disk Drives (HDD - magnetic) - ~300 MB/s</li>
            <li>Solid-State Drives (SSD - electrical charges and floating-gate transistors) ~5000 MB/s</li>
          </ul>
        </p>
      </aside>
    </section>

    <section>
      <h3>Volatile Storage</h3>
      <ul>
        <li>Temporary; lost when computer is turned off</li>
        <li class="fragment">RAM is the most common volatile storage</li>
        <li class="fragment">Expensive üí≤üí≤üí≤</li>
        <li class="fragment">Fast üêá</li>
      </ul>
    </section>

    <section>
      <img src="https://static.tvtropes.org/pmwiki/pub/images/812368b15a632ebc5ebd21fbb23a3689.jpg" alt="" height="400">
      <aside class="notes">
        <p>DDR1 (Double Data Rate) released in 1998 - ~1.6 GB/s</p>
        <p>DDR5 (5th Generation) released in 2020 - ~51.2 GB/s</p>
      </aside>
    </section>
  </section>

  <!-- DATA TYPES -->
  <section>
    <section>
      <h2>Data Types</h2>
      <ul class="fragment">
        <li>Primitive Data Types</li>
        <li>Compound Data Types</li>
      </ul>
    </section>

    <section>
      <h3>Primitive Data Types</h3>
      <ul>
        <li class="fragment">Integer (int)</li>
        <li class="fragment">Floating Point Number (float)</li>
        <li class="fragment">String (str)</li>
        <li class="fragment">Booleans (bool)</li>
        <li class="fragment">NoneType (None)</li>
      </ul>
    </section>

    <section>
      <h3>Example</h3>
      <pre>
        <code data-trim data-noescape class="language-python">
          100             # integer
          3.14            # float
          "Hello, World!" # string
          True            # bool
          None            # None
        </code>
    </section>

    <section>
      <h3>Compound Data Types</h3>
      <ul>
        <li class="fragment">Lists</li>
        <li class="fragment">Tuples</li>
        <li class="fragment">Dictionaries</li>
        <li class="fragment">Sets</li>
        <li class="fragment">Objects (will revisit)</li>
      </ul>
    </section>

    <section>
      <h3>Example</h3>
      <pre>
        <code data-trim data-noescape class="language-python">
          [1, 2, 3]             # list
          (1, 2, 3)             # tuple
          &lbrace;"one": 1, "two": 2&rbrace;  # dictionary
          &lbrace;1, 2, 3&rbrace;             # set
        </code>
      </pre>
    </section>
  </section>

  <!-- TODO activity -->

  <!-- OPERATORS -->
  <section>
    <section>
      <h2>Operators</h2>
    </section>

    <section>
      <h3>Arithmetic Operators</h3>
      <pre>
        <code data-trim data-noescape class="language-python">
          10 + 5 # 15
          10 - 5 # 5
          10 * 5 # 50
          10 / 3 # 3.333
          10 % 3 # 1
          10 ** 5 # 100000
          10 // 3 # 3
        </code>
      </pre>
      <aside class="notes">
        <p>
          <ul>
            <li>Addition</li>
            <li>Subtraction</li>
            <li>Multiplication</li>
            <li>Division</li>
            <li>Modulus (remainder)</li>
            <li>Exponentiation</li>
            <li>Floor division</li>
          </ul>
        </p>
      </aside>
    </section>

    <section>
      <h3>Assignment Operators</h3>
      <pre>
        <code data-trim data-noescape class="language-python">
          x = 5 # x = 5
          x += 3 # x = x + 3
          x -= 3 # x = x - 3
          x *= 3 # x = x * 3
          x /= 3 # x = x / 3
          x %= 3 # x = x % 3
          x //= 3 # x = x // 3
          x **= 3 # x = x ** 3
        </code>
      </pre>
      <aside class="notes">
        <p>There are more for bitwise operators</p>
      </aside>
    </section>

    <section>
      <h3>Comparison Operators</h3>
      <pre>
        <code data-trim data-noescape class="language-python">
          10 == 5 # False
          10 != 5 # True
          10 &gt; 5 # True
          10 &lt; 5 # False
          10 &gt;= 5 # True
          10 &lt;= 5 # False
        </code>
      </pre>
      <aside class="notes">
        <p>
          <ul>
            <li>Equals</li>
            <li>Not equals</li>
            <li>Greater than</li>
            <li>Less than</li>
            <li>Greater than or equal to</li>
            <li>Less than or equal to</li>
          </ul>
        </p>
      </aside>
    </section>

    <section>
      <h3>Logical Operators</h3>
      <p>Do you remember any <strong>logic gates</strong> used in circuits?</p>
      <pre class="fragment">
        <code data-trim data-noescape class="language-python">
          True and False # False
          True or False # True
          not True # False
        </code>
      </pre>
      <aside class="notes">
        <p>
          <ul>
            <li>AND</li>
            <li>OR</li>
            <li>NOT</li>
          </ul>
        </p>
      </aside>
    </section>

    <section>
      <h3>Example</h3>
      <pre>
        <code data-trim data-noescape class="language-python">
          total_minutes = 100
          hours = total_minutes // 60
          minutes = total_minutes % 60
          seconds = total_minutes * 60
        </code>
      </pre>
    </section>

    <section>
      <h3>Example</h3>
      <pre>
        <code data-trim data-noescape class="language-python">
          number = 5
          if number % 2 == 0:
              print("5 is even")
          else:
              print("5 is odd")
        </code>
      </pre>
    </section>

    <section>
      <h3>Example</h3>
      <pre>
        <code data-trim data-noescape class="language-python">
          rylan_is_awesome = False
          ava_is_awesome = True
          if rylan_is_awesome and ava_is_awesome:
              print("Everyone is awesome!")
          if ryan_is_awesome or ava_is_awesome:
              print("Someone is awesome!")
          if not rylan_is_awesome:
              print("Ryan is not awesome ü•≤")
        </code>
      </pre>
    </section>
  </section>

  <!-- LOOPS -->
  <section>
    <section>
      <h2>Loops</h2>
      <aside class="notes">
        <p>Your "make a quiz" assignment was tedious.</p>
        <p>What if you were required to have 100+ questions?</p>
        <p>What if you could jump to another line of code to repeat it?</p>
      </aside>
    </section>

    <!-- GOTO STATEMENT -->
    <section>
      <h3>GOTO</h3>
      <blockquote>AKA "jump" statement</blockquote>
    </section>

    <section>
      <h4>MIPS Example</h4>
      <pre>
        <code data-trim data-noescape class="language-mips">
          loop_len:
            add     $t1, $t0, $a0        # calculate character address
            lb      $t2, 0($t1)          # load character from memory
            beq     $t2, $zero, exit_len # found null-terminating character
            addi    $t0, $t0, 1          # increment counter
            j       loop_len             # loop again
        </code>
      </pre>
    </section>

    <section>
      <h4>C Example</h4>
      <pre>
        <code data-trim data-noescape>
          void checkEvenOrNot(int num) 
          &lbrace;
              if (num % 2 == 0)
                  goto even;
              else
                  goto odd;
          even:
              printf("%d is even", num);
              return;
          odd:
              printf("%d is odd", num);
          &rbrace;
        </code>
      </pre>
    </section>

    <section>
      <h4>What could go wrong?</h4>
      <ul>
        <li class="fragment">Code readability</li>
        <li class="fragment">Infinite loops</li>
        <li class="fragment">Security issues</li>
      </ul>
      <aside class="notes">
        <p>Modern languages only use loops</p>
      </aside>
    </section>

    <!-- WHILE LOOPS -->
    <section>
      <h3>While Loops</h3>
      <ul class="fragment">
        <li>
          Anatomy:
          <ul>
            <li class="fragment">Condition</li>
            <li class="fragment">Body</li>
          </ul>
        </li>
      </ul>
      <aside class="notes">
        <p>Most basic type. All other loops based on this.</p>
      </aside>
    </section>

    <section>
      <h4>Python Example</h4>
      <pre>
        <code data-trim data-noescape class="language-python">
          answer = 0
          guess = -1
          while guess != answer:
              guess = int(input("Guess a number: "))
          print("You got it!")
        </code>
      </pre>
    </section>

    <section>
      <h4>Infinite Loop</h4>
      <pre>
        <code data-trim data-noescape class="language-python">
          print("Hello, World!")
          while True:
              print("Hello again!")
        </code>
      </pre>
    </section>

    <section>
      <h4>Break statements</h4>
      <img src="https://media0.giphy.com/media/v1.Y2lkPTc5MGI3NjExdDNzejVvZWtzdXcwZmFuZ2cyMW55YjA0MHoydWE3YTBrbzhjMGN2YSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/uHcghH7mo1LW9fFFEB/giphy.webp" alt="" height="400">
    </section>

    <section>
      <h4>Loop Until <code>q</code> Pressed</h4>
      <pre>
        <code data-trim data-noescape class="language-python">
          print("Hello, World!")
          while True:
              if input("Press q to quit ") == "q":
                  break
              print("Hello again!")
        </code>
      </pre>
      <aside class="notes">
        <p>Good practice to avoid <code>break</code> statements</p>
      </aside>
    </section>

    <section>
      <h4>Loop Until <code>q</code> Pressed</h4>
      <pre>
        <code data-trim data-noescape class="language-python">
          print("Hello, World!")
          should_continue = True
          while should_continue:
              if input("Press q to quit ") == "q":
                  should_continue = False
              print("Hello again!")
        </code>
      </pre>
    </section>

    <!-- FOR LOOPS -->
    <section>
      <h3>For Loops</h3>
      <ul class="fragment">
        <li class="fragment">Use with lists</li>
        <li class="fragment">Syntactic sugar for while loop</li>
      </ul>
    </section>

    <section>
      <h4>Example</h4>
      <pre>
        <code data-trim data-noescape class="language-python">
          for student in ["Kylan", "Nash", "Micah"]:
              print("Hello, " + student)
        </code>
      </pre>
    </section>

    <section>
      <h4>Example</h4>
      <pre>
        <code data-trim data-noescape class="language-python">
          students = ["Kylan", "Nash", "Micah"]
          index = 0
          while index &lt; 3:
              print("Hello, " + students[index])
              index = index + 1
        </code>
      </pre>
    </section>

    <section>
      <h4>Example</h4>
      <pre>
        <code data-trim data-noescape class="language-python">
          for i in range(10):
              print(i)
        </code>
      </pre>
    </section>
  </section>

  <section>
    <section>
      <h2>Blocks</h2>
      <ul>
        <li class="fragment">A group of statements</li>
        <li class="fragment">Lines must have same indentation</li>
        <li class="fragment">Can be nested</li>
        <li class="fragment">AKA "body" of a loop, function, class, etc.</li>
      </ul>
    </section>

    <section>
      <h3>Example</h3>
      <pre>
        <code data-trim data-noescape data-line-numbers="1-7|4-7|5|7" class="language-python">
          print("Hello, World!")
          should_continue = True
          while should_continue:
              if input("Press q to quit") == "q":
                  should_continue = False
              else:
                  print("Hello again!")
        </code>
      </pre>
    </section>
  </section>

  <section>
    <h2>Remember all that?</h2>
    <img src="https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExbmg4bHN4N2Z4OHN0NHh0OHhnZmk5cm95MndxenE1bmtmazIzdnRmOSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/gEvab1ilmJjA82FaSV/giphy.webp" alt="" height="400">
  </section>

  <section>
    <h2 class="r-fit-text">Activity: Guess the Number</h2>
    <blockquote><a href="/2024/fall/computer-science/assignments/guess-the-number">Project Page</a></blockquote>
    <aside class="notes">
      <p>Make sure to go over basic list usage (see project page)</p>
      <p>Explain additional challenges</p>
      <p>Stop recording</p>
    </aside>
  </section>

  <section>
    <h2 class="r-fit-text">Have a great week üëãüèª</h2>
  </section>
</Slides>
