---
import Course from '@layouts/Course.astro';
import { getCollection } from 'astro:content';
import { formatWeekString, isHrefExternal, SYMBOLS } from 'src/global';
import Gatekeeper from '@components/ShowForInstructor.tsx';
const weeklyResources = (await getCollection('weekly-resources', ({ id }) => /computer-science/.test(id)));
const weeklyEstimates = weeklyResources.map(({ data, id }) => ({
  date: id.slice(-10),
  minutes: data.resources.flatMap(resource => resource.time).reduce((a, b) => a + b, 0),
}));
const totalMinutes = weeklyEstimates.reduce((a, b) => a + b.minutes, 0);
const getResourceTarget = (resource: typeof weeklyResources[0]['data']['resources'][0]) => {
  // all slides opened in new tab
  if (resource.type === 'slides') return '_blank';
  // external links opened in new tab
  return resource.href && isHrefExternal(resource.href) ? '_blank' : undefined;
};
---

<Course course="Computer Science" semester="Fall">
  <p>
    &larr; <a href="/2024/fall/computer-science">Course Homepage</a>
  </p>
  <h1>Instructor Page</h1>
  <p>Contains information that <strong>should only be viewed by the instructor</strong>.</p>
  <main>
    <Gatekeeper client:load>
      <div>
        <h2>All Weekly Resources</h2>
        <table>
          <thead>
            <tr>
              <th>Dates</th>
              <th>Topic(s)</th>
              <th>Resources</th>
            </tr>
          </thead>
          <tbody>
            {
              weeklyResources.map(({ id, data }, index) => (
                <tr>
                  <td>{formatWeekString(id.slice(-10), { duration: index === 0 ? (1000 * 60 * 60 * 24 * 7) : undefined })}</td>
                  <td>
                    <ul>
                      {
                        data.topics.map(topic => (
                          <li>{topic}</li>
                        ))
                      }
                    </ul>
                  </td>
                  <td>
                    <ul class="emoji">
                      {
                        data.resources.map(resource => (
                          <li>
                            {SYMBOLS[resource.type]} <a href={resource.href} target={getResourceTarget(resource)}>{resource.title}</a>
                          </li>
                        ))
                      }
                    </ul>
                  </td>
                </tr>
              ))
            }
          </tbody>
        </table>
        <h2>Time Estimates</h2>
        <table>
          <thead>
            <tr>
              <th>Dates</th>
              <th>Time Estimate</th>
            </tr>
          </thead>
          <tbody>
            {
              weeklyEstimates.map(({ date, minutes }) => (
                <tr>
                  <td>{formatWeekString(date)}</td>
                  <td>
                    {minutes >= 60 ? <span>{Math.floor(minutes / 60)} hr</span> : ''}
                    <span>{minutes % 60} min</span>
                  </td>
                </tr>
              ))
            }
            <tr>
              <td>Cumulative</td>
              <td>{Math.floor(totalMinutes / 60)} hr {totalMinutes % 60} min</td>
            </tr>
          </tbody>
        </table>
      </div>
    </Gatekeeper>
  </main>
</Course>