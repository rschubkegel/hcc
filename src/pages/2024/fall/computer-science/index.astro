---
import Course from '@layouts/Course.astro';
import ShowOnOrAfterToday from '@components/ShowOnOrAfterToday';
import { getCollection } from 'astro:content';
import { capitalizeString, formatWeekString, isHrefExternal, SYMBOLS } from 'src/global';
const weeklyResources = (await getCollection('weekly-resources', ({ id }) => /computer-science/.test(id)));
const getResourceTarget = (resource: typeof weeklyResources[0]['data']['resources'][0]) => {
  // all slides opened in new tab
  if (resource.type === 'slides') return '_blank';
  // external links opened in new tab
  return resource.href && isHrefExternal(resource.href) ? '_blank' : undefined;
};
---

<Course course="Computer Science" semester="Fall">
  <blockquote>
    <p>There are only two hard things in Computer Science: cache invalidation and naming things.</p>
    <p><cite>Phil Karlton</cite></p>
  </blockquote>
  <h2>Course Resources</h2>
  <p>These resources will be used throughout the entirety of the course.</p>
  <table>
    <tbody>
      <tr>
        <td>
          <a href="/2024/fall/computer-science/syllabus">Course Syllabus</a>
        </td>
        <td>
          Includes an overview of the topics covered, grading criteria, and participation expectations.
        </td>
      </tr>
      <tr>
        <td>
          <a href="https://www.jdoodle.com/" target="_blank">JDoodle</a>
        </td>
        <td>
          Online <abbr title="integrated development environment">IDE</abbr> used for coding; can be accessed from any computer via Google account or username/password.
        </td>
      </tr>
      <tr>
        <td>
          <a href="mailto:rylanschubkegel@gmail.com" target="_blank">rylanschubkegel@gmail.com</a>
          <br><a href="tel:+13608401401">3600-840-1401</a>
        </td>
        <td>
          Instructor contact information.
        </td>
      </tr>
    </tbody>
  </table>
  <h2>Weekly Resources</h2>
  <details>
    <summary>Legend</summary>
    <ul class="emoji">
      {
        Object.entries(SYMBOLS).map(([title, emoji]) => (
          <li>{emoji} {capitalizeString(title)}</li>
        ))
      }
    </ul>
  </details>
  <table>
    <thead>
      <tr>
        <th>Dates</th>
        <th>Topic(s)</th>
        <th>Resources</th>
      </tr>
    </thead>
    <tbody>
      {
        weeklyResources.map(({ id, data }, index) => (
          <ShowOnOrAfterToday client:load date={id.slice(-10)}>
            <tr>
              <td>{formatWeekString(id.slice(-10), { duration: index === 0 ? (1000 * 60 * 60 * 24 * 7) : undefined })}</td>
              <td>
                <ul>
                  {
                    data.topics.map(topic => (
                      <li>{topic}</li>
                    ))
                  }
                </ul>
              </td>
              <td>
                <ul class="emoji">
                  {
                    data.resources.map(resource => (
                      <li>
                        {SYMBOLS[resource.type]} <a href={resource.href} target={getResourceTarget(resource)}>{resource.title}</a>
                      </li>
                    ))
                  }
                </ul>
              </td>
            </tr>
          </ShowOnOrAfterToday>
        ))
      }
    </tbody>
  </table>
</Course>
